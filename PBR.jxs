<jittershader name="PBR">
	<description>a physical-based rendering shader </description>
	<param name="pos" 	type="vec3" state="POSITION" />
	<param name="nor" 	type="vec3" state="NORMAL" />
	<param name="tan" 	type="vec3" state="TANGENT" />
	<param name="bit" 	type="vec3" state="BITANGENT" />
	<param name="uv" 	type="vec2" state="TEXCOORD" />
	<param name="MVP" 	type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV"	type="mat4" state="MODELVIEW_MATRIX" />
	<param name="M" 	type="mat4" state="WORLD_MATRIX" />
	<param name="NM"	type="mat3" state="NORMAL_MATRIX" />
	<param name="eye" 	type="vec3" state="CAMERA_POSITION" />
	//textures
	<param name="albedoTex" 	type="int" default="0" />
	<param name="RMOHTex" 		type="int" default="1" />
	<param name="normalTex" 	type="int" default="2" />
	<param name="irradianceTex"	type="int" default="3" />
	<param name="equirectTex"	type="int" default="4" />
	<param name="integMap"		type="int" default="5" />

	<param name="texRepeat" 	type="vec2" default="1. 1." />
	<param name="heightScale"	type="float" default="0.0" />

	<language name="glsl" version="1.5">
		<bind param="pos" 	program="vp" />
		<bind param="nor" 	program="vp" />
		<bind param="tan" 	program="vp" />
		<bind param="bit" 	program="vp" />
		<bind param="uv" 	program="vp" />
		<bind param="MVP" 	program="vp" />
		<bind param="MV"	program="vp" />
		<bind param="M" 	program="vp" />
		<bind param="NM"	program="vp" />
		<bind param="eye" 	program="fp" />
		//textures
		<bind param="albedoTex" 	program="fp" />
		<bind param="RMOHTex" 		program="fp" />
		<bind param="normalTex" 	program="fp" />
		<bind param="irradianceTex"	program="fp" />
		<bind param="equirectTex"	program="fp" />
		<bind param="integMap"		program="fp" />

		<bind param="texRepeat"		program="vp" />
		<bind param="heightScale"   program="fp" />

		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
uniform mat4 MVP, MV, M;
uniform mat3 NM;
uniform vec2 texRepeat;
in vec3 pos, nor, tan, bit;
in vec2 uv;

out jit_PerVertex {	
	smooth 	vec3 nor;
	smooth 	vec3 tan;
	smooth 	vec3 bit;
	smooth 	vec3 pos;
	smooth 	vec2 uv;
	flat 	vec2 texRepeat;
	smooth	vec3 test;
	smooth 	vec3 eyePos;
} jit_out;

void main() {	

	//mat3 testMat = transpose(inverse(mat3x3(MV)));

	gl_Position = MVP * vec4(pos, 1.);	
	jit_out.nor = (M * vec4(nor, 0.)).xyz;
	jit_out.tan = (M * vec4(tan, 0.)).xyz;
	//jit_out.tan = normalize(jit_out.tan - dot(jit_out.tan, jit_out.nor) * jit_out.nor);
	jit_out.bit = -cross(jit_out.nor, jit_out.tan);
	jit_out.pos = (M * vec4(pos, 1.)).xyz;
	jit_out.uv = uv*texRepeat;
	jit_out.texRepeat = texRepeat;
	jit_out.eyePos = (MV * vec4(pos, 1.)).xyz;

	jit_out.test = tan;//vec3(M * vec4(tan, 0.));//testMat*tan;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core
#define PI 3.14159265

uniform vec3 eye;
uniform sampler2D albedoTex, RMOHTex, normalTex, equirectTex, integMap;
uniform samplerCube irradianceTex;
uniform float heightScale;

in jit_PerVertex {
	smooth 	vec3 nor;
	smooth 	vec3 tan;
	smooth 	vec3 bit;
	smooth 	vec3 pos;
	smooth 	vec2 uv;	
	flat 	vec2 texRepeat;
	smooth	vec3 test;
	smooth  vec3 eyePos;
} jit_in;

out vec4 col;

//utilities
vec3 	lin2sRGB(vec3 x){ return pow(x, vec3(0.4545454545));}
vec3 	sRGB2lin(vec3 x){ return pow(x, vec3(2.2));}
float 	saturate(float x){ return clamp(x, 0., 1.);}
vec3 	saturate3(vec3 x){ return clamp(x, vec3(0.), vec3(1.));}
vec2 dir2uv(vec3 v){
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= vec2(-0.1591, 0.3183); //to invert atan
    uv += 0.5;
    return uv;
}
//Parallax mapping
vec3 parallaxMapping(vec2 T, vec3 V, vec2 texRepeat){
	//compute texture coordinates ratio
	float uvRatio = texRepeat.x / texRepeat.y;
	V.x *= uvRatio;

   	// determine optimal number of layers
   	const float minLayers = 300;
   	const float maxLayers = 300;
   	float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0, 0, 1), V)));

   	// height of each layer
   	float layerHeight = 1.0 / numLayers;
   	// current depth of the layer
   	float curLayerHeight = 0;
   	// shift of texture coordinates for each layer
   	vec2 dtex = heightScale * V.xy / V.z / numLayers;

   	// current texture coordinates
   	vec2 currentTextureCoords = T;

   	float lod = ( 1. - abs(dot(vec3(0, 0, 1), V)))*0.;

  	// depth from heightmap
   	float heightFromTexture = 1. - textureLod(RMOHTex, currentTextureCoords, lod).w;

   	// while point is above the surface
   	while(heightFromTexture > curLayerHeight) 
   	{
      	// to the next layer
      	curLayerHeight += layerHeight; 
      	// shift of texture coordinates
      	currentTextureCoords -= dtex;
      	// new depth from heightmap
      	heightFromTexture = 1. - textureLod(RMOHTex, currentTextureCoords, lod).w;
   	}

   	///////////////////////////////////////////////////////////

   	// previous texture coordinates
   	vec2 prevTCoords = currentTextureCoords + dtex;

   	// heights for linear interpolation
   	float nextH = heightFromTexture - curLayerHeight;
   	float prevH = 1. - textureLod(RMOHTex, prevTCoords, lod).w
                           - curLayerHeight + layerHeight;

   	// proportions for linear interpolation
   	float weight = nextH / (nextH - prevH);

   	// interpolation of texture coordinates
   	vec2 finalTexCoords = prevTCoords * weight + currentTextureCoords * (1.0-weight);

   	// interpolation of depth values
   	// curLayerHeight + prevH * weight + nextH * (1.0 - weight);

   	// return result
   	return vec3(finalTexCoords, curLayerHeight + prevH * weight + nextH * (1.0 - weight));
}
float parallaxSoftShadowMultiplier(vec3 L, vec3 N, vec2 initialTexCoord, float initialHeight){



   // calculate lighting only for surface oriented to the light source
   float NdotL = dot(N, L);
   if(NdotL < 0.0) {return 0.;}

   const float minLayers = 200;
   const float maxLayers = 200;

    // calculate initial parameters
    float numSamplesUnderSurface = 0.;
    float shadowMultiplier = 0.;
    float numLayers = mix(maxLayers, minLayers, abs(NdotL));
    float layerHeight = initialHeight / numLayers;
    vec2 texStep = heightScale * L.xy / L.z / numLayers;

    // current parameters
    float currentLayerHeight = initialHeight - layerHeight;
    vec2 currentTextureCoords = initialTexCoord + texStep;
    float heightFromTexture = 1. - texture(RMOHTex, currentTextureCoords).w;
    float stepIndex = 1.;

    //int count = 0;

    // while point is below depth 0.0 )
    while(currentLayerHeight > 0.){

        // if point is under the surface
        if(heightFromTexture < currentLayerHeight){

            // calculate partial shadowing factor
            numSamplesUnderSurface += 1.;
            float newShadowMultiplier = (currentLayerHeight  - heightFromTexture)*(1.0 - stepIndex / numLayers);
            shadowMultiplier = max(shadowMultiplier, newShadowMultiplier);
        }

        // offset to the next layer
        stepIndex += 1.;
        currentLayerHeight -= layerHeight;
        currentTextureCoords += texStep;
        heightFromTexture = 1. - texture(RMOHTex, currentTextureCoords).w;
        //count += 1;
    }

    // Shadowing factor should be 1 if there were no points under the surface
    return (numSamplesUnderSurface <= 1.) ? 1. : 1. - saturate(shadowMultiplier*30);
    //return abs(NdotL);
}
//PBR functions
vec3 fresnelSchlick(float HdotV, vec3 F0){
	//Fresnel Schlick approximation
	float 	x = saturate(1. - HdotV); //x^5
	float 	x2 = x*x;
			x2 *= x2;
			x *= x2;
    return 	F0 + (1. - F0) * x;
} 
vec3 fresnelSchlickRoughness(float HdotV, vec3 F0, float rou)
{
	float 	x = saturate(1. - HdotV); //x^5
	float 	x2 = x*x;
			x2 *= x2;
			x *= x2;
    return F0 + (max(vec3(1.0 - rou), F0) - F0) * x;
}   
float DistributionGGX(float NdotH, float rou){
			rou *= rou; //Disney trick!
			rou *= rou; //roughness^4
     		NdotH *= NdotH; //square the dot product
    float 	denom = (NdotH * (rou - 1.0) + 1.0);
    		denom *= denom;
    		denom *= PI;
	
    return 	rou / denom;
}
float GeometrySchlickGGX(float NdotV, float rou){
			rou += 1.;
    float 	k = (rou*rou) / 8.0; //Disney trick again...
    return NdotV / ( NdotV * (1.0 - k) + k );
}
float GeometrySmith(float NdotV, float NdotL, float rou){
    float ggx2  = GeometrySchlickGGX(NdotV, rou);
    float ggx1  = GeometrySchlickGGX(NdotL, rou);
	
    return ggx1 * ggx2;
} 
vec3 getRadiance(vec3 V, vec3 N, vec3 lig, vec3 ligCol, vec3 pos, vec3 alb, float rou, float met){

	vec3	L = normalize(lig - pos);				//light direction
	vec3	H = normalize(V + L);					//half vector
	float	ligDis = length(lig - pos);		
	float	att = 1. / (ligDis*ligDis);				//light attenuation
	vec3	rad = ligCol * att;						//radiance

	//compute dot products
	float	HdotV = saturate(dot(H, V));
    float 	NdotV = saturate(dot(N, V)) + 0.001; //avoid deviding by 0
    float 	NdotL = saturate(dot(N, L));
    float   NdotH = saturate(dot(N, H));

	vec3 	F0 	= vec3(0.04); 						//dialettric F0
			F0 	= mix(F0, alb, vec3(met));			//use alb as F0 if metallic
	vec3 	F  	= fresnelSchlickRoughness(HdotV, F0, rou); 		//compute fresnel
	float	NDF = DistributionGGX(NdotH, rou);   	//compute NDF term
	float 	G   = GeometrySmith(NdotV, NdotL, rou); //compute G term   
	vec3 	spe = (NDF*G*F)/(4.*NdotV*NdotL+0.0001);  

	vec3 	kS = F;					//k specular
	vec3 	kD = vec3(1.0) - kS;	//k diffuse
			kD *= 1.0 - met;		//nullify k diffuse if metallic

	return 	(kD * alb / PI + spe) * rad * NdotL;
}
vec3 ACES(vec3 x){	
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return saturate3((x*(a*x+b))/(x*(c*x+d)+e));
}
void main() {

	vec3	pos = jit_in.pos;						//world position
	vec3 	nor = normalize(jit_in.nor);			//world normals
	vec3 	tan = normalize(jit_in.tan);			//world tangents
	vec3 	bit = normalize(jit_in.bit);			//world bitangent
	mat3 	TBN = mat3(tan, bit, nor);				//TBN matrix
	mat3    transTBN = transpose(TBN);

	//prepare parallax mapping
	vec3	tanV = normalize(transTBN * (eye - pos));		//tangent view direction
	vec3 	uvHeight 	= parallaxMapping(jit_in.uv, tanV, jit_in.texRepeat);	//texture coordinates
	vec2	uv = uvHeight.xy;
	float	height = uvHeight.z;
	//float	lod = abs( 1. - dot(vec3(0, 0, 1.), tanV) )*0;
	vec2	limit = jit_in.texRepeat;	
	if(uv.x > limit.x || uv.y > limit.y || uv.x < 0.0 || uv.y < 0.0){discard; }

	vec3 	alb = texture(albedoTex, uv).rgb;		//albedo color
			alb = sRGB2lin(alb);	
	vec4	RMOH = texture(RMOHTex, uv);		
	float	rou = RMOH.r;//texture(roughnessTex, uv).r;		//roughness
	float	met = RMOH.g;//texture(metallicTex, uv).r;		//metallic
	float	occ = RMOH.b;//texture(aoTex, uv).r;				//ambient occlusion

	vec3	V = normalize(eye - pos);				//view direction
	vec3	tanN = texture(normalTex, uv).rgb * 2. - vec3(1.); 	//normals
	vec3	N = normalize(TBN * tanN);
			//N = nor;

	vec3	radiance = vec3(0.);							//initialize the out color to 0

	//lighting
	{
		vec3	lig = vec3(1., 3., 0.);					//light position
		vec3	tanLigDir = normalize(transTBN * (lig - pos));	//light pos in tangent space
		float 	sha = parallaxSoftShadowMultiplier(tanLigDir, tanN, uv, height);
		vec3	ligCol = vec3(1.)*9.;						//light color
				radiance += sha * getRadiance(V, N, lig, ligCol, pos, alb, rou, met); //get radiance for this light
				//lin = vec3(sha);
	}
	{
		vec3	lig = vec3(-2., 1., -1.);					//light position
		vec3	tanLigDir = normalize(transTBN * (lig - pos));	//light pos in tangent space
		float 	sha = parallaxSoftShadowMultiplier(tanLigDir, tanN, uv, height);
		vec3	ligCol = vec3(0.8, 0.5, 0.1)*9.;				//light color
				radiance += sha * getRadiance(V, N, lig, ligCol, pos, alb, rou, met); //get radiance for this light
	}
	{
		vec3	lig = vec3(2., -1., 1.);					//light position
		vec3	tanLigDir = normalize(transTBN * (lig - pos));	//light pos in tangent space
		float 	sha = parallaxSoftShadowMultiplier(tanLigDir, tanN, uv, height);
		vec3	ligCol = vec3(0.1, 0.5, 0.9)*9.;				//light color
				radiance += sha * getRadiance(V, N, lig, ligCol, pos, alb, rou, met); //get radiance for this light
	}
	{
		vec3	lig = vec3(-2., -1., -2.);					//light position
		vec3	tanLigDir = normalize(transTBN * (lig - pos));	//light pos in tangent space
		float 	sha = parallaxSoftShadowMultiplier(tanLigDir, tanN, uv, height);
		vec3	ligCol = vec3(1.)*9.;				//light color
				radiance += sha * getRadiance(V, N, lig, ligCol, pos, alb, rou, met); //get radiance for this light
	}

	vec3 	F0 	= vec3(0.02); 						//dialettric F0
			F0 	= mix(F0, alb, vec3(met));			//use alb as F0 if metallic
	float	NdotV = saturate(dot(N, V));
	vec3 	kS = fresnelSchlickRoughness(NdotV, F0, rou);
	vec3 	kD = vec3(1.) - kS;
			kD *= 1. - met;
	vec3 	irradiance = texture(irradianceTex, N).rgb;
	vec3	diffuse = irradiance * alb * kD;

	float 	lod             	= rou*10.;
	vec3	ref 				= reflect(-V, N);
	vec3 	prefilteredColor 	= texture(equirectTex, dir2uv(ref), lod).rgb;
	vec2 	envBRDF          	= texture(integMap, vec2(NdotV, rou)).xy;
 	vec3 	specular 			= prefilteredColor * (kS * envBRDF.x + envBRDF.y); 

	vec3 	ambient = (diffuse + specular) * occ; 

 			col.rgb = radiance + ambient;
 			//col.rgb = ambient;


 			//gamma corrections
			col.rgb /= col.rgb + vec3(1.); 		//from HDI lo LDI
			//lin = ACES(lin);
			col.rgb = lin2sRGB(col.rgb);	//gamma correction
			col.a = 1.;
			//col.rgb = vec3(dFdx(uv.x), dFdx(uv.y), 0.)*100.;

}	
]]>
		</program>
	</language>
</jittershader>
